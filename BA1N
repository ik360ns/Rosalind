#BA1N  vraća skup svih kmera duljine len(pattern) čija hamming distance od patterna nije veca od d

def Suffix(Pattern):
  return Pattern[1:len(Pattern)];  #sve osim prvog simbola

def HammingDistance(text1,text2):
    count=0
    for i in range(len(text1)):
        if text1[i]!=text2[i]:
            count+=1
    return count

nucleotides=["A","C","G","T"];

def Neighbors(Pattern, d):
  if d == 0:
    return {Pattern};
  if len(Pattern)== 1:
    return {"A", "C", "G", "T"};
  Neighborhood=set();
  SuffixNeighbors=Neighbors(Suffix(Pattern),d);
  for Text in SuffixNeighbors:
    if(HammingDistance(Suffix(Pattern),Text)<d):
      for i in range(0,4):
        Neighborhood.add(nucleotides[i]+Text);
    else:
      Neighborhood.add(Pattern[0]+Text);
  return Neighborhood;

pattern=input("pattern: ")
d=int(input("d: "))
Neighbors(pattern,d)

Neighborhood=Neighbors(pattern,d)
for element in Neighborhood:
  print(element)
